##############################################################
#########################     Q7     #########################
##############################################################

a = 0
b = 2
trueX =  (2/5) * (2 ** (5/2)) 

def foo(x):     #f(x) = x^3/2
    return x ** (1.5)

def getxs(n):   #produces the vales of xs for the given number of intervals
    xs = []
    for i in range(0,n+1):
        xs.append(i*((a+b)/n))
    return xs

def simpsons(n):
    xs = getxs(n)
    total = foo(a) + foo(b)
    for i in range(1,n):
        if(i%2 == 0):  #even
            total = total + (2*foo(xs[i]))
        else:
            total = total + (4*foo(xs[i]))
    total = total*((a+b)/(3*n))
    return total

def main():
    print(('%-10s' % "n") + "|   " + "Observable Error")
    print("-"*30)
    n = 1
    for i in range(1,25):   #from 1 upto, but not including 25
        n = 2*n         #calc next n
        simp = simpsons(n)
        error = simp - trueX
        print(('%-10i' % (n)) + "|   " + str(error))

main()


##  n         |   Simpson's Approx.
##  ------------------------------
##  2         |   2.2761423749153966
##  4         |   2.26518498591147
##  8         |   2.2631786886613634
##  16        |   2.2628192748946354
##  32        |   2.2627554337661513
##  64        |   2.2627441289262262
##  128       |   2.262742129290658
##  256       |   2.2627417757264467
##  512       |   2.2627417132198304
##  1024      |   2.262741702169824
##  2048      |   2.2627417002164205
##  4096      |   2.2627416998711016
##  8192      |   2.262741699810058
##  16384     |   2.262741699799273
##  32768     |   2.262741699797364
##  65536     |   2.26274169979701
##  131072    |   2.2627416997969507
##  262144    |   2.262741699796946
##  524288    |   2.262741699796937
##  1048576   |   2.2627416997969076
##  2097152   |   2.2627416997966807
##  4194304   |   2.262741699797063
##  8388608   |   2.2627416997976613

##  n         |   Observable Error
##  ------------------------------
##  2         |   0.013400675118444116
##  4         |   0.0024432861145173845
##  8         |   0.00043698886441090323
##  16        |   7.757509768291371e-05
##  32        |   1.373396919879255e-05
##  64        |   2.4291292737288472e-06
##  128       |   4.2949370548939214e-07
##  256       |   7.592949424761741e-08
##  512       |   1.3422877920277188e-08
##  1024      |   2.3728716769255698e-09
##  2048      |   4.1946801587755544e-10
##  4096      |   7.41491312794551e-11
##  8192      |   1.3105516671885198e-11
##  16384     |   2.320366121466577e-12
##  32768     |   4.1167069753100805e-13
##  65536     |   5.728750807065808e-14
##  131072    |   -1.7763568394002505e-15
##  262144    |   -6.661338147750939e-15
##  524288    |   -1.554312234475219e-14
##  1048576   |   -4.4853010194856324e-14
##  2097152   |   -2.717825964282383e-13
##  4194304   |   1.1057821325266559e-13
##  8388608   |   7.087663789206999e-13
##  16777216  |   3.8768988019910466e-13


# Roundoff error from the floating point arithmetic,
# this is causing catastrophic cancellation as the numbers get extremely 'close' together.
